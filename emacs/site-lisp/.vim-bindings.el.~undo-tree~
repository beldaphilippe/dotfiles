(undo-tree-save-format-version . 1)
"de06c34287d3b4bcaab936c33d50805c3fe79ce0"
[nil nil nil nil (26697 17771 112409 650000) 0 nil]
([nil nil ((#("k" 0 1 (fontified nil)) . 1762) (1757 . 1763) (nil rear-nonsticky nil 1756 . 1757) (1724 . 1757) (#("-" 0 1 (fontified nil)) . 1724) (1724 . 1725) (#("set" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 1724) (1721 . 1727) (t 26694 40832 184368 788000)) ((#("
  " 0 1 (fontified t) 1 3 (fontified nil)) . 1721) (undo-tree-id5 . -3) (undo-tree-id6 . -3) (#("set" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 1724) (1724 . 1727) (#("-" 0 1 (fontified nil)) . 1724) (1724 . 1725) (#("(setq " 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil)) . 1724) (undo-tree-id7 . -6) (undo-tree-id8 . -6) (#("undo-tree-auto-save-history" 0 26 (fontified nil) 26 27 (fontified nil rear-nonsticky nil)) . 1730) (nil rear-nonsticky t 1756 . 1757) (#(" nil)k" 0 5 (fontified nil) 5 6 (fontified nil)) . 1757) (1762 . 1763)) (26697 17790 609087 326000) 0 nil])
([nil nil ((#("(define-key evil-normal-state-map (kbd \"^\") 'evil-first-non-blank-of-visual-line)
  (define-key evil-normal-state-map (kbd \"$\") 'evil-end-of-visual-line)
  (define-key evil-normal-state-map (kbd \"k\") 'evil-previous-visual-line)
  (define-key evil-normal-state-map (kbd \"j\") 'evil-next-visual-line)
" 0 39 (fontified t) 39 42 (face font-lock-string-face fontified t) 42 123 (fontified t) 123 126 (face font-lock-string-face fontified t) 126 195 (fontified t) 195 198 (face font-lock-string-face fontified t) 198 269 (fontified t) 269 272 (face font-lock-string-face fontified t) 272 298 (fontified t)) . 1109) (undo-tree-id9 . -297) (undo-tree-id10 . -297) (undo-tree-id11 . -297) (undo-tree-id12 . -297) (undo-tree-id13 . -297) (undo-tree-id14 . -297) (undo-tree-id15 . -297) (undo-tree-id16 . -297) (undo-tree-id17 . -297) (undo-tree-id18 . -297) (undo-tree-id19 . -297) (undo-tree-id20 . -297) (undo-tree-id21 . -297) (undo-tree-id22 . -297) (undo-tree-id23 . -297) (undo-tree-id24 . -297) (undo-tree-id25 . -297) (undo-tree-id26 . -297) (undo-tree-id27 . -297) (undo-tree-id28 . -70) (undo-tree-id29 . -297) (undo-tree-id30 . -296) (undo-tree-id31 . -296) (undo-tree-id32 . -296) (undo-tree-id33 . -296) (undo-tree-id34 . -296) (undo-tree-id35 . -296) (undo-tree-id36 . -296) (undo-tree-id37 . -296) (undo-tree-id38 . -296) (undo-tree-id39 . -296) (undo-tree-id40 . -296) (undo-tree-id41 . -296) (undo-tree-id42 . -296) (undo-tree-id43 . -296) (undo-tree-id44 . -296) (undo-tree-id45 . -296) (undo-tree-id46 . -296) (undo-tree-id47 . -222) (undo-tree-id48 . -222) (undo-tree-id49 . -222) (undo-tree-id50 . -222) (undo-tree-id51 . -222) (undo-tree-id52 . -222) (undo-tree-id53 . -222) (undo-tree-id54 . -222) (undo-tree-id55 . -222) (undo-tree-id56 . -222) (undo-tree-id57 . -222) (undo-tree-id58 . -150) (undo-tree-id59 . -150) (undo-tree-id60 . -150) (undo-tree-id61 . -150) (undo-tree-id62 . -150) (undo-tree-id63 . -66) (undo-tree-id64 . -66) (undo-tree-id65 . -66) (undo-tree-id66 . -66) (undo-tree-id67 . -66) (undo-tree-id68 . -66) (undo-tree-id69 . -66) (undo-tree-id70 . -66) (undo-tree-id71 . -66) (undo-tree-id72 . -66) (undo-tree-id73 . -66) (undo-tree-id74 . -66) (undo-tree-id75 . -66) (undo-tree-id76 . -66) (undo-tree-id77 . -66) (undo-tree-id78 . -66) (undo-tree-id79 . -66) (undo-tree-id80 . -66) (undo-tree-id81 . -66) (undo-tree-id82 . -66) (undo-tree-id83 . -66) (undo-tree-id84 . -66) (undo-tree-id85 . -66) (undo-tree-id86 . -66) (undo-tree-id87 . -66) (undo-tree-id88 . -66) (undo-tree-id89 . -66) (undo-tree-id90 . -66) (undo-tree-id91 . -66) (undo-tree-id92 . -66) (undo-tree-id93 . -66) (undo-tree-id94 . -66) (undo-tree-id95 . -66) (undo-tree-id96 . -66) (undo-tree-id97 . -66) (undo-tree-id98 . -66) (undo-tree-id99 . -66) (undo-tree-id100 . -66) (undo-tree-id101 . -66) (undo-tree-id102 . -84) (undo-tree-id103 . -84) (undo-tree-id104 . -84) (undo-tree-id105 . -84) (undo-tree-id106 . -84) (undo-tree-id107 . -84) (undo-tree-id108 . -84) (undo-tree-id109 . -84) (undo-tree-id110 . -84) (undo-tree-id111 . -84) (undo-tree-id112 . -84) (undo-tree-id113 . -84) (undo-tree-id114 . -84) (undo-tree-id115 . -84) (undo-tree-id116 . -84) (undo-tree-id117 . -156) (undo-tree-id118 . -156) (undo-tree-id119 . -156) (undo-tree-id120 . -156) (undo-tree-id121 . -156) (undo-tree-id122 . -156) (undo-tree-id123 . -156) (undo-tree-id124 . -156) (undo-tree-id125 . -156) (undo-tree-id126 . -156) (undo-tree-id127 . -156) (undo-tree-id128 . -156) (undo-tree-id129 . -156) (undo-tree-id130 . -156) (undo-tree-id131 . -156) (undo-tree-id132 . -230) (undo-tree-id133 . -230) (undo-tree-id134 . -230) (undo-tree-id135 . -230) (undo-tree-id136 . -230) (undo-tree-id137 . -230) (undo-tree-id138 . -230) (undo-tree-id139 . -230) (undo-tree-id140 . -230) (undo-tree-id141 . -230) (undo-tree-id142 . -230) (undo-tree-id143 . -230) (undo-tree-id144 . -230) (undo-tree-id145 . -230) (undo-tree-id146 . -230) (undo-tree-id147 . -230) (undo-tree-id148 . -230) (undo-tree-id149 . -230) (undo-tree-id150 . -230) (undo-tree-id151 . -228) (undo-tree-id152 . -297) (undo-tree-id153 . -297) (undo-tree-id154 . -297) (undo-tree-id155 . -297) (undo-tree-id156 . -297) (undo-tree-id157 . -297) (undo-tree-id158 . -297) (undo-tree-id159 . -297) (undo-tree-id160 . -297) (undo-tree-id161 . -297) (undo-tree-id162 . -297) (undo-tree-id163 . -297) (undo-tree-id164 . -297) (undo-tree-id165 . -297) (undo-tree-id166 . -297) (undo-tree-id167 . -297) (undo-tree-id168 . -297) (undo-tree-id169 . -297) (undo-tree-id170 . -297) (undo-tree-id171 . -297) (undo-tree-id172 . -297) (undo-tree-id173 . -297) (undo-tree-id174 . -297) (undo-tree-id175 . -297) (undo-tree-id176 . -297) (undo-tree-id177 . -297) (undo-tree-id178 . -297) (undo-tree-id179 . -297) (undo-tree-id180 . -297) (undo-tree-id181 . -297) (undo-tree-id182 . -297) (undo-tree-id183 . -297) (undo-tree-id184 . -297) (undo-tree-id185 . -298) (undo-tree-id186 . -297) 1406) nil (26697 17813 354309 929000) 0 nil] [nil nil ((502 . 503) (#("  " 0 2 (fontified nil)) . 502) (#("
" 0 1 (fontified t)) . 502) (570 . 571) (#("  " 0 2 (fontified nil)) . 570) (#("
" 0 1 (fontified t)) . 570) (638 . 639) (#("  " 0 2 (fontified nil)) . 638) (#("
" 0 1 (fontified t)) . 638) (707 . 708) (#("  " 0 2 (fontified nil)) . 707) (#("
" 0 1 (fontified t)) . 707) (781 . 782) (#("  " 0 2 (fontified nil)) . 781) (#("
" 0 1 (fontified t)) . 781) (855 . 856) (#("  " 0 2 (fontified nil)) . 855) (#("
" 0 1 (fontified t)) . 855)) ((855 . 856) (855 . 857) (#(" " 0 1 (fontified nil)) . 855) (781 . 782) (781 . 783) (#(" " 0 1 (fontified nil)) . 781) (707 . 708) (707 . 709) (#(" " 0 1 (fontified nil)) . 707) (638 . 639) (638 . 640) (#(" " 0 1 (fontified nil)) . 638) (570 . 571) (570 . 572) (#(" " 0 1 (fontified nil)) . 570) (502 . 503) (502 . 504) (#(" " 0 1 (fontified t)) . 502)) (26697 17788 229532 802000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1225 . 1226) (nil fontified nil 928 . 1226) (928 . 1226) 927) nil (26697 17900 452541 954000) 0 nil] [nil nil ((nil rear-nonsticky nil 1226 . 1227) (nil fontified nil 929 . 1227) (929 . 1227) 928) ((#("(define-key evil-normal-state-map (kbd \"^\") 'evil-first-non-blank-of-visual-line)
  (define-key evil-normal-state-map (kbd \"$\") 'evil-end-of-visual-line)
  (define-key evil-normal-state-map (kbd \"k\") 'evil-previous-visual-line)
  (define-key evil-normal-state-map (kbd \"j\") 'evil-next-visual-line)
" 0 82 (face font-lock-comment-face fontified nil) 82 123 (fontified nil) 123 126 (face font-lock-string-face fontified nil) 126 195 (fontified nil) 195 198 (face font-lock-string-face fontified nil) 198 228 (fontified nil) 228 269 (fontified nil) 269 272 (face font-lock-string-face fontified nil) 272 297 (fontified nil) 297 298 (rear-nonsticky nil fontified nil)) . 929) (undo-tree-id192 . -298) (undo-tree-id193 . -297) (undo-tree-id194 . -298) (undo-tree-id195 . -298) (undo-tree-id196 . -298) (nil fontified t 1127 . 1157) (nil fontified t 1124 . 1127) (nil fontified t 1055 . 1124) (nil fontified t 1052 . 1055) (nil fontified t 1011 . 1052) (nil fontified t 929 . 1011) (nil rear-nonsticky t 1226 . 1227)) (26697 17813 354149 286000) 0 nil] [nil nil ((nil rear-nonsticky nil 1156 . 1157) (nil fontified nil 859 . 1157) (859 . 1157) 858) ((#("(define-key evil-normal-state-map (kbd \"^\") 'evil-first-non-blank-of-visual-line)
  (define-key evil-normal-state-map (kbd \"$\") 'evil-end-of-visual-line)
  (define-key evil-normal-state-map (kbd \"k\") 'evil-previous-visual-line)
  (define-key evil-normal-state-map (kbd \"j\") 'evil-next-visual-line)
" 0 39 (fontified nil) 39 42 (face font-lock-string-face fontified nil) 42 123 (fontified nil) 123 126 (face font-lock-string-face fontified nil) 126 195 (fontified nil) 195 198 (face font-lock-string-face fontified nil) 198 228 (fontified nil) 228 269 (fontified nil) 269 272 (face font-lock-string-face fontified nil) 272 297 (fontified nil) 297 298 (rear-nonsticky nil fontified nil)) . 859) (undo-tree-id187 . -298) (undo-tree-id188 . -297) (undo-tree-id189 . -298) (undo-tree-id190 . -298) (undo-tree-id191 . -298) (nil fontified t 1057 . 1087) (nil fontified t 1054 . 1057) (nil fontified t 985 . 1054) (nil fontified t 982 . 985) (nil fontified t 901 . 982) (nil fontified t 898 . 901) (nil fontified t 859 . 898) (nil rear-nonsticky t 1156 . 1157)) (26697 17811 622117 725000) 0 nil])
nil
([nil nil ((#("k" 0 1 (fontified t)) . -1228) (undo-tree-id213 . -1) (1226 . 1229)) nil (26697 17900 452541 154000) 0 nil])
nil
nil
([nil nil ((#("k" 0 1 (fontified t)) . -1409) (undo-tree-id211 . -1) (1409 . 1410) (#("  " 0 2 (fontified t)) . -1409) (undo-tree-id212 . 2) 1408) nil (26697 17900 452539 619000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -503) (undo-tree-id209 . -2) 505 (#("k" 0 1 (fontified t)) . -505) (undo-tree-id210 . -1) (502 . 506) 447) nil (26697 17900 452536 472000) 0 nil])
([nil nil ((nil rear-nonsticky nil 505 . 506) (#("
" 0 1 (fontified nil)) . -575) (503 . 576)) nil (26697 17900 452530 506000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 503)) nil (26697 17900 452529 280000) 0 nil])
([nil nil ((552 . 553) (#("," 0 1 (face font-lock-string-face fontified t)) . 552)) nil (26697 17900 452528 399000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -566) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (557 . 567) (#("switch-" 0 7 (fontified t)) . -557) (undo-tree-id203 . -7) (undo-tree-id204 . -7) 564 (#("to-" 0 3 (fontified t)) . -564) (undo-tree-id205 . -3) (undo-tree-id206 . -3) 567 (#("buffer" 0 6 (fontified t)) . -567) (undo-tree-id207 . -1) (undo-tree-id208 . -6) 573) nil (26697 17923 268347 75000) 0 nil])
([nil nil ((apply -15 991 1310 undo--wrap-and-run-primitive-undo 991 1310 ((1243 . 1244) nil (1242 . 1243) nil (1241 . 1242) nil (1240 . 1241) nil (1239 . 1240) nil (1164 . 1165) nil (1163 . 1164) nil (1162 . 1163) nil (1161 . 1162) nil (1160 . 1161) nil (1087 . 1088) nil (1086 . 1087) nil (1085 . 1086) nil (1084 . 1085) nil (1083 . 1084))) (#("k" 0 1 (fontified t)) . -999) (undo-tree-id540 . -1) (994 . 1000) (t 26697 17900 574703 146000)) nil (26697 17941 855373 386000) 0 nil] [nil nil ((1225 . 1235) (t 26697 17900 574703 146000)) ((#("          " 0 10 (fontified t)) . 1225) (undo-tree-id214 . -9) (undo-tree-id215 . -9) (undo-tree-id216 . -9) (undo-tree-id217 . -9) (undo-tree-id218 . -9)) (26697 17923 267943 860000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1230) (#("  " 0 2 (fontified t)) . -1153) (#("  " 0 2 (fontified t)) . -1078) (#("  " 0 2 (fontified t)) . -991) 1255) nil (26697 17950 720972 578000) 0 nil] [nil nil ((#("k" 0 1 (fontified t)) . -1016) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (1010 . 1017) (#("evil-" 0 5 (fontified t)) . -1010) (undo-tree-id225 . -5) (undo-tree-id226 . -5) (undo-tree-id227 . -5) (undo-tree-id228 . -5) (undo-tree-id229 . -5) (undo-tree-id230 . -5) (undo-tree-id231 . -5) (undo-tree-id232 . -5) (undo-tree-id233 . -5) (undo-tree-id234 . -5) (undo-tree-id235 . -5) (undo-tree-id236 . -5) (undo-tree-id237 . -5) (undo-tree-id238 . -5) (undo-tree-id239 . -5) (undo-tree-id240 . -5) (undo-tree-id241 . -5) (undo-tree-id242 . -5) (undo-tree-id243 . -5) (undo-tree-id244 . -5) (undo-tree-id245 . -5) (undo-tree-id246 . -5) (undo-tree-id247 . -5) (undo-tree-id248 . -5) (undo-tree-id249 . -5) (undo-tree-id250 . -5) (undo-tree-id251 . -5) (undo-tree-id252 . -5) (undo-tree-id253 . -5) (undo-tree-id254 . -5) (undo-tree-id255 . -5) (undo-tree-id256 . -5) (undo-tree-id257 . -5) (undo-tree-id258 . -5) (undo-tree-id259 . -5) (undo-tree-id260 . -5) (undo-tree-id261 . -5) (undo-tree-id262 . -5) (undo-tree-id263 . -5) (undo-tree-id264 . -5) (undo-tree-id265 . -5) (undo-tree-id266 . -5) (undo-tree-id267 . -5) (undo-tree-id268 . -5) (undo-tree-id269 . -5) (undo-tree-id270 . -5) (undo-tree-id271 . -5) (undo-tree-id272 . -5) (undo-tree-id273 . -5) (undo-tree-id274 . -5) (undo-tree-id275 . -5) (undo-tree-id276 . -5) (undo-tree-id277 . -5) (undo-tree-id278 . -5) (undo-tree-id279 . -5) (undo-tree-id280 . -5) (undo-tree-id281 . -5) (undo-tree-id282 . -5) (undo-tree-id283 . -5) (undo-tree-id284 . -5) (undo-tree-id285 . -5) (undo-tree-id286 . -5) (undo-tree-id287 . -5) (undo-tree-id288 . -5) (undo-tree-id289 . -5) (undo-tree-id290 . -5) (undo-tree-id291 . -5) (undo-tree-id292 . -5) (undo-tree-id293 . -5) (undo-tree-id294 . -5) (undo-tree-id295 . -5) (undo-tree-id296 . -5) (undo-tree-id297 . -5) (undo-tree-id298 . -5) (undo-tree-id299 . -5) (undo-tree-id300 . -5) (undo-tree-id301 . -5) (undo-tree-id302 . -5) (undo-tree-id303 . -5) (undo-tree-id304 . -5) (undo-tree-id305 . -5) (undo-tree-id306 . -5) (undo-tree-id307 . -5) (undo-tree-id308 . -5) (undo-tree-id309 . -5) (undo-tree-id310 . -5) (undo-tree-id311 . -5) (undo-tree-id312 . -5) (undo-tree-id313 . -5) (undo-tree-id314 . -5) (undo-tree-id315 . -5) (undo-tree-id316 . -5) (undo-tree-id317 . -5) (undo-tree-id318 . -5) (undo-tree-id319 . -5) (undo-tree-id320 . -5) (undo-tree-id321 . -5) (undo-tree-id322 . -5) (undo-tree-id323 . -5) 1015 (#("normal-" 0 7 (fontified t)) . -1015) (undo-tree-id324 . -7) (undo-tree-id325 . -7) (undo-tree-id326 . -7) (undo-tree-id327 . -7) (undo-tree-id328 . -7) (undo-tree-id329 . -7) (undo-tree-id330 . -7) (undo-tree-id331 . -7) (undo-tree-id332 . -7) (undo-tree-id333 . -7) (undo-tree-id334 . -7) (undo-tree-id335 . -7) (undo-tree-id336 . -7) (undo-tree-id337 . -7) (undo-tree-id338 . -7) (undo-tree-id339 . -7) (undo-tree-id340 . -7) (undo-tree-id341 . -7) (undo-tree-id342 . -7) (undo-tree-id343 . -7) (undo-tree-id344 . -7) (undo-tree-id345 . -7) (undo-tree-id346 . -7) (undo-tree-id347 . -7) (undo-tree-id348 . -7) (undo-tree-id349 . -7) (undo-tree-id350 . -7) (undo-tree-id351 . -7) (undo-tree-id352 . -7) (undo-tree-id353 . -7) (undo-tree-id354 . -7) (undo-tree-id355 . -7) (undo-tree-id356 . -7) (undo-tree-id357 . -7) (undo-tree-id358 . -7) (undo-tree-id359 . -7) (undo-tree-id360 . -7) (undo-tree-id361 . -7) (undo-tree-id362 . -7) (undo-tree-id363 . -7) (undo-tree-id364 . -7) (undo-tree-id365 . -7) (undo-tree-id366 . -7) (undo-tree-id367 . -7) (undo-tree-id368 . -7) (undo-tree-id369 . -7) (undo-tree-id370 . -7) (undo-tree-id371 . -7) (undo-tree-id372 . -7) (undo-tree-id373 . -7) (undo-tree-id374 . -7) (undo-tree-id375 . -7) (undo-tree-id376 . -7) (undo-tree-id377 . -7) (undo-tree-id378 . -7) (undo-tree-id379 . -7) (undo-tree-id380 . -7) (undo-tree-id381 . -7) (undo-tree-id382 . -7) (undo-tree-id383 . -7) (undo-tree-id384 . -7) (undo-tree-id385 . -7) (undo-tree-id386 . -7) (undo-tree-id387 . -7) (undo-tree-id388 . -7) (undo-tree-id389 . -7) (undo-tree-id390 . -7) (undo-tree-id391 . -7) (undo-tree-id392 . -7) (undo-tree-id393 . -7) (undo-tree-id394 . -7) (undo-tree-id395 . -7) (undo-tree-id396 . -7) (undo-tree-id397 . -7) (undo-tree-id398 . -7) (undo-tree-id399 . -7) (undo-tree-id400 . -7) (undo-tree-id401 . -7) (undo-tree-id402 . -7) (undo-tree-id403 . -7) (undo-tree-id404 . -7) (undo-tree-id405 . -7) (undo-tree-id406 . -7) (undo-tree-id407 . -7) (undo-tree-id408 . -7) (undo-tree-id409 . -7) (undo-tree-id410 . -7) (undo-tree-id411 . -7) (undo-tree-id412 . -7) 1022 (#("state-" 0 6 (fontified t)) . -1022) (undo-tree-id413 . -1) (undo-tree-id414 . -3) (undo-tree-id415 . -3) (undo-tree-id416 . -3) (undo-tree-id417 . -3) (undo-tree-id418 . -3) (undo-tree-id419 . -4) (undo-tree-id420 . -4) (undo-tree-id421 . -4) (undo-tree-id422 . -4) (undo-tree-id423 . -4) (undo-tree-id424 . -5) (undo-tree-id425 . -5) (undo-tree-id426 . -5) (undo-tree-id427 . -5) (undo-tree-id428 . -5) (undo-tree-id429 . -6) (undo-tree-id430 . -6) (undo-tree-id431 . -6) (undo-tree-id432 . -6) (undo-tree-id433 . -6) (undo-tree-id434 . -6) (undo-tree-id435 . -6) (undo-tree-id436 . -6) (undo-tree-id437 . -6) (undo-tree-id438 . -6) (undo-tree-id439 . -6) (undo-tree-id440 . -6) (undo-tree-id441 . -6) (undo-tree-id442 . -6) (undo-tree-id443 . -6) (undo-tree-id444 . -6) (undo-tree-id445 . -6) (undo-tree-id446 . -6) (undo-tree-id447 . -6) (undo-tree-id448 . -6) (undo-tree-id449 . -6) (undo-tree-id450 . -6) (undo-tree-id451 . -6) (undo-tree-id452 . -6) (undo-tree-id453 . -6) (undo-tree-id454 . -6) (undo-tree-id455 . -6) (undo-tree-id456 . -6) (undo-tree-id457 . -6) (undo-tree-id458 . -6) (undo-tree-id459 . -6) (undo-tree-id460 . -6) (undo-tree-id461 . -6) (undo-tree-id462 . -6) (undo-tree-id463 . -6) (undo-tree-id464 . -6) (undo-tree-id465 . -6) (undo-tree-id466 . -6) (undo-tree-id467 . -6) (undo-tree-id468 . -6) (undo-tree-id469 . -6) (undo-tree-id470 . -6) (undo-tree-id471 . -6) (undo-tree-id472 . -6) (undo-tree-id473 . -6) (undo-tree-id474 . -6) (undo-tree-id475 . -6) (undo-tree-id476 . -6) (undo-tree-id477 . -6) (undo-tree-id478 . -6) (undo-tree-id479 . -6) (undo-tree-id480 . -6) (undo-tree-id481 . -6) (undo-tree-id482 . -6) (undo-tree-id483 . -6) (undo-tree-id484 . -6) (undo-tree-id485 . -6) (undo-tree-id486 . -6) (undo-tree-id487 . -6) (undo-tree-id488 . -6) (undo-tree-id489 . -6) (undo-tree-id490 . -6) (undo-tree-id491 . -6) 1028 (#("map" 0 3 (fontified t)) . -1028) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -2) (undo-tree-id498 . -2) (undo-tree-id499 . -2) (undo-tree-id500 . -2) (undo-tree-id501 . -2) (undo-tree-id502 . -3) (undo-tree-id503 . -3) (undo-tree-id504 . -3) (undo-tree-id505 . -3) (undo-tree-id506 . -3) (undo-tree-id507 . -3) (undo-tree-id508 . -3) (undo-tree-id509 . -3) (undo-tree-id510 . -3) (undo-tree-id511 . -3) (undo-tree-id512 . -3) (undo-tree-id513 . -3) (undo-tree-id514 . -3) (undo-tree-id515 . -3) (undo-tree-id516 . -3) (undo-tree-id517 . -3) (undo-tree-id518 . -3) (undo-tree-id519 . -3) (undo-tree-id520 . -3) (undo-tree-id521 . -3) (undo-tree-id522 . -3) (undo-tree-id523 . -3) (undo-tree-id524 . -3) (undo-tree-id525 . -3) (undo-tree-id526 . -3) (undo-tree-id527 . -3) (undo-tree-id528 . -3) (undo-tree-id529 . -3) (undo-tree-id530 . -3) (undo-tree-id531 . -3) (undo-tree-id532 . -3) (undo-tree-id533 . -3) (undo-tree-id534 . -3) (undo-tree-id535 . -3) (undo-tree-id536 . -3) (undo-tree-id537 . -3) (undo-tree-id538 . -3) (undo-tree-id539 . -3) 1031) ((1010 . 1031) (#("'normak" 0 6 (fontified nil) 6 7 (fontified nil)) . 1010) (undo-tree-id541 . -5) (undo-tree-id542 . -7) (undo-tree-id543 . -7) (undo-tree-id544 . -7) (undo-tree-id545 . -7) (undo-tree-id546 . -7) (undo-tree-id547 . -5) (undo-tree-id548 . -5) (1016 . 1017)) (26697 17941 855064 448000) 0 nil])
nil
([nil nil ((apply 18 991 1278 undo--wrap-and-run-primitive-undo 991 1278 ((#(" " 0 1 (fontified t)) . 1245) (#<marker at 428 in vim-bindings.el> . -1) nil (#("-map" 0 4 (fontified t)) . 1245) (#<marker at 1024 in vim-bindings.el> . -4) (#<marker in no buffer> . -4) nil (#("-state" 0 6 (fontified t)) . 1245) (#<marker in no buffer> . -6) nil (#("-normal" 0 7 (fontified t)) . 1245) (#<marker in no buffer> . -7) nil (#("evil" 0 4 (fontified t)) . 1245) (#<marker in no buffer> . -4) nil (1244 . 1245) nil (1243 . 1244) nil (1242 . 1243) nil (1241 . 1242) nil (1240 . 1241) nil (1239 . 1240) nil (1238 . 1239) nil (1237 . 1238) nil (1236 . 1237) nil (1235 . 1236) nil (1234 . 1235) nil (1233 . 1234) nil (1232 . 1233) nil (1231 . 1232) nil (1230 . 1231) nil (1229 . 1230) nil (#("e" 0 1 (fontified t)) . -1229) 1230 nil (#("v" 0 1 (fontified t)) . -1230) 1231 nil (#("i" 0 1 (fontified t)) . -1231) 1232 nil (#("l" 0 1 (fontified t)) . -1232) 1233 nil (1232 . 1233) nil (1231 . 1232) nil (1230 . 1231) nil (1229 . 1230) nil (#(" " 0 1 (fontified t)) . 1174) nil (#("-map" 0 4 (fontified t)) . 1174) (#<marker in no buffer> . -4) nil (#("-state" 0 6 (fontified t)) . 1174) (#<marker in no buffer> . -6) nil (#("-normal" 0 7 (fontified t)) . 1174) (#<marker in no buffer> . -7) nil (#("evil" 0 4 (fontified t)) . 1174) (#<marker in no buffer> . -4) nil (1173 . 1174) nil (1172 . 1173) nil (1171 . 1172) nil (1170 . 1171) nil (1169 . 1170) nil (1168 . 1169) nil (1167 . 1168) nil (1166 . 1167) nil (1165 . 1166) nil (1164 . 1165) nil (1163 . 1164) nil (1162 . 1163) nil (1161 . 1162) nil (1160 . 1161) nil (1159 . 1160) nil (1158 . 1159) nil (#("e" 0 1 (fontified t)) . -1158) 1159 nil (#("v" 0 1 (fontified t)) . -1159) 1160 nil (#("i" 0 1 (fontified t)) . -1160) 1161 nil (#("l" 0 1 (fontified t)) . -1161) 1162 nil (1161 . 1162) nil (1160 . 1161) nil (1159 . 1160) nil (1158 . 1159) nil (#(" " 0 1 (fontified t)) . 1105) nil (#("-map" 0 4 (fontified t)) . 1105) (#<marker in no buffer> . -4) nil (#("-state" 0 6 (fontified t)) . 1105) (#<marker in no buffer> . -6) nil (#("-normal" 0 7 (fontified t)) . 1105) (#<marker in no buffer> . -7) nil (#("evil" 0 4 (fontified t)) . 1105) (#<marker in no buffer> . -4) nil (1104 . 1105) nil (1103 . 1104) nil (1102 . 1103) nil (1101 . 1102) nil (1100 . 1101) nil (1099 . 1100) nil (1098 . 1099) nil (1097 . 1098) nil (1096 . 1097) nil (1095 . 1096) nil (1094 . 1095) nil (1093 . 1094) nil (1092 . 1093) nil (1091 . 1092) nil (1090 . 1091) nil (1089 . 1090) nil (#("e" 0 1 (fontified t)) . -1089) 1090 nil (#("v" 0 1 (fontified t)) . -1090) 1091 nil (#("i" 0 1 (fontified t)) . -1091) 1092 nil (#("l" 0 1 (fontified t)) . -1092) 1093 nil (1092 . 1093) nil (1091 . 1092) nil (1090 . 1091) nil (1089 . 1090))) (#("k" 0 1 (fontified t)) . -1024) (undo-tree-id592 . -1) (1024 . 1025) (#(" " 0 1 (fontified t)) . 1024) (undo-tree-id593 . 1) (#("-map" 0 1 (fontified t) 1 4 (fontified t)) . 1024) (#("-state" 0 1 (fontified t) 1 6 (fontified t)) . 1024) (#("-normal" 0 1 (fontified t) 1 7 (fontified t)) . 1024) (#("evil" 0 4 (fontified t)) . 1024) (undo-tree-id594 . -2) (1008 . 1024) (#("e" 0 1 (fontified t)) . -1008) (undo-tree-id595 . -1) (#("v" 0 1 (fontified t)) . -1009) (undo-tree-id596 . -1) (#("i" 0 1 (fontified t)) . -1010) (undo-tree-id597 . -1) (#("l" 0 1 (fontified t)) . -1011) (undo-tree-id598 . -1) 1012 (1008 . 1012)) nil (26697 18039 699704 158000) 0 nil] [nil nil ((#("  " 0 2 (fontified t)) . -921) 1010) ((921 . 923)) (26697 17950 720872 450000) 0 nil])
nil
([nil nil ((1218 . 1220) (1145 . 1147) (1074 . 1076) (991 . 993) 1245) nil (26697 18039 699698 402000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 1288 . 1289) (#("
" 0 1 (fontified nil rear-nonsticky t)) . -1355) (1286 . 1356) 1252) nil (26697 18039 699697 679000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-string-face fontified t)) . -1333) (undo-tree-id590 . -1) (1332 . 1334) (1328 . 1332) (#("j" 0 1 (face font-lock-string-face fontified t)) . -1328) (undo-tree-id591 . -1) 1329) nil (26697 18039 699696 842000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -1358) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (1358 . 1359)) nil (26697 18039 699695 193000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -1359) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (1359 . 1360) (1343 . 1359) (#("(" 0 1 (fontified t)) . -1343) (undo-tree-id555 . -1) 1344 (1337 . 1344) (#("evil-" 0 5 (fontified t)) . -1337) (undo-tree-id556 . -5) (undo-tree-id557 . -5) (undo-tree-id558 . -5) (undo-tree-id559 . -5) (undo-tree-id560 . -5) (undo-tree-id561 . -5) (undo-tree-id562 . -5) 1342 (#("next-" 0 5 (fontified t)) . -1342) (undo-tree-id563 . -5) (undo-tree-id564 . -5) (undo-tree-id565 . -5) (undo-tree-id566 . -5) (undo-tree-id567 . -5) (undo-tree-id568 . -5) (undo-tree-id569 . -5) 1347 (#("visual-" 0 7 (fontified t)) . -1347) (undo-tree-id570 . -7) (undo-tree-id571 . -7) (undo-tree-id572 . -7) (undo-tree-id573 . -7) (undo-tree-id574 . -7) (undo-tree-id575 . -7) (undo-tree-id576 . -7) 1354 (#("line" 0 4 (fontified t)) . -1354) (undo-tree-id577 . -4) (undo-tree-id578 . -4) (undo-tree-id579 . -4) (undo-tree-id580 . -4) (undo-tree-id581 . -4) (undo-tree-id582 . -4) (undo-tree-id583 . -4) 1358) nil (26697 18039 699688 34000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t)) . 402) (t 26697 18039 737919 670000)) nil (26697 18082 23611 259000) 0 nil])
([nil nil ((#("k" 0 1 (face (font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified t)) . -430) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (429 . 431)) nil (26697 18082 23610 519000) 0 nil])
([nil current ((#(")" 0 1 (fontified t)) . 429) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1)) nil (26697 18082 23603 928000) 0 nil])
nil
